{"version":3,"sources":["logo.svg","TypingTest.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TypingTest","props","textsplit","text","split","state","plaintext","inputblank","colors","map","x","nextLetter","currIndex","handleChange","bind","calculateResult","this","setState","e","length","target","value","color","greens","filter","jsx","j","push","style","backgroundColor","letter","className","type","onChange","React","Component","xyz","App","set1","set2","set3","id","name","onClick","for","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gMAAAA,EAAOC,QAAU,IAA0B,kC,mHCoF5BC,G,WAjFf,kDAEI,WAAYC,GAAQ,IAAD,sBAEf,IAAIC,GADJ,cAAMD,IACeA,MAAME,KAAKC,MAAM,IAFvB,OAGf,EAAKC,MAAQ,CACTC,UAAW,EAAKL,MAAME,KACtBA,KAAMD,EACNK,WAAY,GACZC,OAAQN,EAAUO,KAAI,SAAAC,GAAC,MAAK,CACxB,OAAUA,EACV,MAAS,YAEbC,WAAYT,EAAU,GACtBU,UAAW,GAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBAfR,EAFvB,iEAqBQ,GAAIE,KAAKX,MAAMC,YAAcU,KAAKf,MAAME,KAAM,CAC1C,IAAID,EAAYc,KAAKf,MAAME,KAAKC,MAAM,IACtCY,KAAKC,SAAS,CACdX,UAAWU,KAAKf,MAAME,KACtBA,KAAMD,EACNK,WAAY,GACZC,OAAQN,EAAUO,KAAI,SAAAC,GAAC,MAAK,CACxB,OAAUA,EACV,MAAS,YAEbC,WAAYT,EAAU,GACtBU,UAAW,OAhCvB,mCAsCiBM,GACLF,KAAKX,MAAMO,WAAaI,KAAKX,MAAMF,KAAKgB,SAGxCD,EAAEE,OAAOC,QAAUL,KAAKX,MAAMM,WAC9BK,KAAKX,MAAMG,OAAOQ,KAAKX,MAAMO,WAAWU,MAAQ,QAEhDN,KAAKX,MAAMG,OAAOQ,KAAKX,MAAMO,WAAWU,MAAQ,MAEpDN,KAAKC,SAAS,CAACV,WAAYW,EAAEE,OAAOC,MAAOb,OAAQQ,KAAKX,MAAMG,OAAQI,UAAWI,KAAKX,MAAMO,UAAU,EAAGD,WAAYK,KAAKX,MAAMF,KAAKa,KAAKX,MAAMO,UAAU,QA/ClK,wCAmDQ,IAAIW,EAASP,KAAKX,MAAMG,OAAOgB,QAAO,SAAAd,GAAC,MAAgB,UAAZA,EAAEY,SAAmBH,OACrDH,KAAKX,MAAMG,OAAOgB,QAAO,SAAAd,GAAC,MAAgB,QAAZA,EAAEY,SAAiBH,OAE5D,OAAOI,EAAOP,KAAKX,MAAMF,KAAKgB,SAtDtC,+BA2DQ,GAAIH,KAAKf,MAAME,KAAKgB,OAAS,EACzB,OAAQ,kDAIZ,IADA,IAAIM,EAAM,GACDC,EAAI,EAAGA,EAAIV,KAAKX,MAAMG,OAAOW,OAAQO,IAC1CD,EAAIE,KAAK,0BAAMC,MAAO,CAACC,gBAAiBb,KAAKX,MAAMG,OAAOkB,GAAGJ,QAASN,KAAKX,MAAMG,OAAOkB,GAAGI,SAG/F,OAAId,KAAKX,MAAMO,WAAaI,KAAKX,MAAMF,KAAKgB,OAChC,6BAAK,4CAAkBH,KAAKD,oBAIpC,yBAAKgB,UAAU,QACX,2BAAIN,GACJ,2BAAOO,KAAO,OAAOX,MAAS,GAAIY,SAAYjB,KAAKH,oBA3EnE,GAAgCqB,IAAMC,YCElCC,EAAM,CAAC,GAAI,+eAAkf,qfAAsf,6cA+Cx+BC,E,kDA3CX,WAAYpC,GAAQ,IAAD,8BACf,cAAMA,IACDI,MAAQ,CACT2B,KAAM,GAEV,EAAKM,KAAO,EAAKA,KAAKxB,KAAV,gBACZ,EAAKyB,KAAO,EAAKA,KAAKzB,KAAV,gBACZ,EAAK0B,KAAO,EAAKA,KAAK1B,KAAV,gBAPG,E,iDAUdI,GACDF,KAAKC,SAAS,CAACe,KAAM,M,2BAGpBd,GACDF,KAAKC,SAAS,CAACe,KAAM,M,2BAGpBd,GACDF,KAAKC,SAAS,CAACe,KAAM,M,+BAOrB,OACI,yBAAKD,UAAU,OACX,4BAAQA,UAAU,cACd,8CAAoBf,KAAKX,MAAM2B,MAC/B,2BAAOA,KAAK,QAAQS,GAAG,UAAUC,KAAK,QAAQrB,MAAM,UAAUsB,QAAW3B,KAAKsB,OAC9E,2BAAOM,IAAI,WAAX,KACA,2BAAOZ,KAAK,QAAQS,GAAG,UAAUC,KAAK,QAAQrB,MAAM,UAAUsB,QAAW3B,KAAKuB,OAC9E,2BAAOK,IAAI,WAAX,KACA,2BAAOZ,KAAK,QAAQS,GAAG,UAAUC,KAAK,QAAQrB,MAAM,UAAUsB,QAAW3B,KAAKwB,OAC9E,2BAAOI,IAAI,WAAX,KACA,kBAAC,EAAD,CAAYzC,KAAMiC,EAAIpB,KAAKX,MAAM2B,c,GAtCnCE,IAAMC,WCKJU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fa851c9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './App.css';\r\n\r\nexport class TypingTest extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n        let textsplit = this.props.text.split(\"\")\r\n        this.state = {\r\n            plaintext: this.props.text,\r\n            text: textsplit,\r\n            inputblank: \"\",\r\n            colors: textsplit.map(x => ({\r\n                \"letter\": x,\r\n                \"color\": \"black\"\r\n                })),\r\n            nextLetter: textsplit[0],\r\n            currIndex: 0\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.calculateResult = this.calculateResult.bind(this)\r\n    }\r\n    \r\n    componentDidUpdate() {\r\n        if (this.state.plaintext !== this.props.text) {\r\n            let textsplit = this.props.text.split(\"\")\r\n            this.setState({\r\n            plaintext: this.props.text,\r\n            text: textsplit,\r\n            inputblank: \"\",\r\n            colors: textsplit.map(x => ({\r\n                \"letter\": x,\r\n                \"color\": \"black\"\r\n                })),\r\n            nextLetter: textsplit[0],\r\n            currIndex: 0\r\n            })\r\n        }\r\n    }\r\n        \r\n    \r\n    handleChange(e) {\r\n        if (this.state.currIndex >= this.state.text.length) {\r\n            return\r\n        }\r\n        if (e.target.value === this.state.nextLetter) {\r\n            this.state.colors[this.state.currIndex].color = \"green\"\r\n        } else {\r\n            this.state.colors[this.state.currIndex].color = \"red\"\r\n        }\r\n        this.setState({inputblank: e.target.value, colors: this.state.colors, currIndex: this.state.currIndex+1, nextLetter: this.state.text[this.state.currIndex+1]})\r\n    }\r\n    \r\n    calculateResult() {\r\n        let greens = this.state.colors.filter(x => x.color === \"green\").length\r\n        let reds = this.state.colors.filter(x => x.color === \"red\").length\r\n        \r\n        return greens/this.state.text.length\r\n    }\r\n    \r\n    render() {\r\n        \r\n        if (this.props.text.length < 1) {\r\n            return (<p>Please select trial</p>)\r\n        }\r\n        \r\n        let jsx = []\r\n        for (let j = 0; j < this.state.colors.length; j++) {\r\n            jsx.push(<span style={{backgroundColor: this.state.colors[j].color}}>{this.state.colors[j].letter}</span>)\r\n        }\r\n        \r\n        if (this.state.currIndex >= this.state.text.length) {\r\n            return (<div><span>Accuracy = {this.calculateResult()}</span></div>)\r\n        }\r\n        \r\n        return (\r\n            <div className=\"test\">\r\n                <p>{jsx}</p>\r\n                <input type = \"text\" value = {\"\"} onChange = {this.handleChange} />\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default TypingTest","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TypingTest from './TypingTest.js'\n\nlet xyz = [\"\", \"The new boy went off brushing the dust from his clothes, sobbing, snuffling, and occasionally looking back and shaking his head and threatening what he would do to Tom the \\\"next time he caught him out.\\\" To which Tom responded with jeers, and started off in high feather, and as soon as his back was turned the new boy snatched up a stone, threw it and hit him between the shoulders and then turned tail and ran like an antelope. Tom chased the traitor home, and thus found out where he lived.\", \"To Sherlock Holmes she is always the woman. I have seldom heard him mention her under any other name. In his eyes she eclipses and predominates the whole of her gender. It was not that he felt any emotion akin to love for Irene Adler. All emotions, and that one particularly, were abhorrent to his cold, precise but admirably balanced mind. He was, I take it, the most perfect reasoning and observing machine that the world has seen, but as a lover he would have placed himself in a false position.\", \"It was a smart little landau which rattled up to the door of Briony Lodge. As it pulled up, one of the loafing men at the corner dashed forward to open the door in the hope of earning a copper, but was elbowed away by another loafer, who had rushed up with the same intention. A fierce quarrel broke out, which was increased by the two guardsmen, who took sides with one of the loungers, and by the scissors-grinder, who was equally hot upon the other side.\"]\n\nclass App extends React.Component {\n    \n    constructor(props) {\n        super(props)\n        this.state = {\n            type: 0\n        }\n        this.set1 = this.set1.bind(this)\n        this.set2 = this.set2.bind(this)\n        this.set3 = this.set3.bind(this)\n    }\n    \n    set1(e) {\n        this.setState({type: 1})\n    }\n    \n    set2(e) {\n        this.setState({type: 2})\n    }\n    \n    set3(e) {\n        this.setState({type: 3})\n    }\n    \n    render() {\n        \n        \n        \n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p>Selected Trial: {this.state.type}</p>\n                    <input type=\"radio\" id=\"Trial 1\" name=\"trial\" value=\"Trial 1\" onClick = {this.set1}/>\n                    <label for=\"Trial 1\">1</label>\n                    <input type=\"radio\" id=\"Trial 2\" name=\"trial\" value=\"Trial 2\" onClick = {this.set2}/>\n                    <label for=\"Trial 2\">2</label>\n                    <input type=\"radio\" id=\"Trial 3\" name=\"trial\" value=\"Trial 3\" onClick = {this.set3}/>\n                    <label for=\"Trial 3\">3</label>\n                    <TypingTest text={xyz[this.state.type]}/>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}