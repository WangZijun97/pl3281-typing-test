{"version":3,"sources":["logo.svg","TypingTest.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ABC","split","TypingTest","state","inputblank","colors","map","x","nextLetter","currIndex","handleChange","bind","calculateResult","e","this","length","target","value","color","setState","greens","filter","jsx","j","push","style","backgroundColor","letter","type","onChange","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gMAAAA,EAAOC,QAAU,IAA0B,kC,8HCGvCC,EAAM,kBAAkBC,MAAM,IA0DnBC,EAxDf,kDAEI,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,WAAY,GACZC,OAAQL,EAAIM,KAAI,SAAAC,GAAC,MAAK,CAClB,OAAUA,EACV,MAAS,YAEbC,WAAYR,EAAI,GAChBS,UAAW,GAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBAZb,EAFlB,yDAiBiBE,GACLC,KAAKX,MAAMM,WAAaT,EAAIe,SAG5BF,EAAEG,OAAOC,QAAUH,KAAKX,MAAMK,WAC9BM,KAAKX,MAAME,OAAOS,KAAKX,MAAMM,WAAWS,MAAQ,QAEhDJ,KAAKX,MAAME,OAAOS,KAAKX,MAAMM,WAAWS,MAAQ,MAEpDJ,KAAKK,SAAS,CAACf,WAAYS,EAAEG,OAAOC,MAAOZ,OAAQS,KAAKX,MAAME,OAAQI,UAAWK,KAAKX,MAAMM,UAAU,EAAGD,WAAYR,EAAIc,KAAKX,MAAMM,UAAU,QA1BtJ,wCA8BQ,IAAIW,EAASN,KAAKX,MAAME,OAAOgB,QAAO,SAAAd,GAAC,MAAgB,UAAZA,EAAEW,SAAmBH,OACrDD,KAAKX,MAAME,OAAOgB,QAAO,SAAAd,GAAC,MAAgB,QAAZA,EAAEW,SAAiBH,OAE5D,OAAOK,EAAOpB,EAAIe,SAjC1B,+BAuCQ,IADA,IAAIO,EAAM,GACDC,EAAI,EAAGA,EAAIT,KAAKX,MAAME,OAAOU,OAAQQ,IAC1CD,EAAIE,KAAK,0BAAMC,MAAO,CAACC,gBAAiBZ,KAAKX,MAAME,OAAOkB,GAAGL,QAASJ,KAAKX,MAAME,OAAOkB,GAAGI,SAG/F,OAAIb,KAAKX,MAAMM,WAAaT,EAAIe,OACpB,6BAAK,4CAAkBD,KAAKF,oBAIpC,6BACI,2BAAIU,GACJ,2BAAOM,KAAO,OAAOX,MAAS,GAAIY,SAAYf,KAAKJ,oBAlDnE,GAAgCoB,IAAMC,WCUvBC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.848e30d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './App.css';\r\n\r\nlet ABC = \"Short Sentence!\".split(\"\")\r\n\r\nexport class TypingTest extends React.Component {\r\n    \r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            inputblank: \"\",\r\n            colors: ABC.map(x => ({\r\n                \"letter\": x,\r\n                \"color\": \"black\"\r\n                })),\r\n            nextLetter: ABC[0],\r\n            currIndex: 0\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.calculateResult = this.calculateResult.bind(this)\r\n    }\r\n    \r\n    handleChange(e) {\r\n        if (this.state.currIndex >= ABC.length) {\r\n            return\r\n        }\r\n        if (e.target.value === this.state.nextLetter) {\r\n            this.state.colors[this.state.currIndex].color = \"green\"\r\n        } else {\r\n            this.state.colors[this.state.currIndex].color = \"red\"\r\n        }\r\n        this.setState({inputblank: e.target.value, colors: this.state.colors, currIndex: this.state.currIndex+1, nextLetter: ABC[this.state.currIndex+1]})\r\n    }\r\n    \r\n    calculateResult() {\r\n        let greens = this.state.colors.filter(x => x.color === \"green\").length\r\n        let reds = this.state.colors.filter(x => x.color === \"red\").length\r\n        \r\n        return greens/ABC.length\r\n    }\r\n    \r\n    render() {\r\n        \r\n        let jsx = []\r\n        for (let j = 0; j < this.state.colors.length; j++) {\r\n            jsx.push(<span style={{backgroundColor: this.state.colors[j].color}}>{this.state.colors[j].letter}</span>)\r\n        }\r\n        \r\n        if (this.state.currIndex >= ABC.length) {\r\n            return (<div><span>Accuracy = {this.calculateResult()}</span></div>)\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <p>{jsx}</p>\r\n                <input type = \"text\" value = {\"\"} onChange = {this.handleChange} />\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default TypingTest","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TypingTest from './TypingTest.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TypingTest />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}